{"version":3,"sources":["components/title/title.js","components/form/form.js","components/weather/weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","React","Component","Form","props","this","onSubmit","type","id","name","placeholder","Weather","city","country","temperature","description","error","App","state","undefined","getWeather","_callee","e","response","_ref2","cod","main","sys","weather","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","process","sent","json","_this","setState","temp","stop","title_title","components_form_form","components_weather_weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAaeA,0LARP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,oCAJIE,IAAMC,YCoBXC,0LAdF,IACGC,EAAUC,KAAVD,MACR,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOM,SAAUF,EAAME,UACnCT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,GAAG,OAAOC,KAAK,OAAOC,YAAY,eAErDb,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,GAAG,UAAUC,KAAK,UAAUC,YAAY,kBAE3Db,EAAAC,EAAAC,cAAA,qCAbGE,IAAMC,YCYVS,0LAXP,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBACZK,KAAKD,MAAMQ,MAAQP,KAAKD,MAAMS,SAAWhB,EAAAC,EAAAC,cAAA,sBAAcM,KAAKD,MAAMQ,KAAzB,KAAiCP,KAAKD,MAAMS,SAD1F,IACyG,KACpGR,KAAKD,MAAMU,aAAejB,EAAAC,EAAAC,cAAA,yBAAiBM,KAAKD,MAAMU,aAF3D,IAE8E,KACzET,KAAKD,MAAMW,aAAelB,EAAAC,EAAAC,cAAA,wBAAgBM,KAAKD,MAAMW,aAH1D,IAG6E,KACxEV,KAAKD,MAAMY,OAASnB,EAAAC,EAAAC,cAAA,SAAIM,KAAKD,MAAMY,eAR9Bf,IAAMC,YC8Dbe,oNAzDXC,MAAQ,CACJJ,iBAAaK,EACbP,UAAMO,EACNN,aAASM,EACTJ,iBAAaI,EACbH,WAAOG,KAIXC,iDAAa,SAAAC,EAAOC,GAAP,IAAAV,EAAAC,EAAAU,EAAAC,EAAAC,EAAAC,EAAAjB,EAAAkB,EAAAC,EAAA,OAAAC,EAAA/B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAETX,EAAEY,iBAEItB,EAAOU,EAAEa,OAAOC,SAASxB,KAAKyB,MAC9BxB,EAAUS,EAAEa,OAAOC,SAASvB,QAAQwB,MALjCN,EAAAE,KAAA,EAOcK,MAAK,oDAAAC,OAC4B3B,EAD5B,KAAA2B,OACoC1B,EADpC,WAAA0B,OAEpBC,mCAFoB,oBAPnB,cAOHjB,EAPGQ,EAAAU,KAAAV,EAAAE,KAAA,EAauCV,EAASmB,OAbhD,OAAAlB,EAAAO,EAAAU,KAaDhB,EAbCD,EAaDC,IAAKC,EAbJF,EAaIE,KAAMjB,EAbVe,EAaUf,KAAMkB,EAbhBH,EAagBG,IAAKC,EAbrBJ,EAaqBI,QAE1BhB,GAAQC,GAAmB,MAARY,EACnBkB,EAAKC,SAAS,CACV9B,YAAaY,EAAKmB,KAClBjC,KAAMH,EACNI,QAASc,EAAId,QACbE,YAAaa,EAAQ,GAAGb,YACxBC,MAAO,KAGX2B,EAAKC,SAAS,CACV9B,iBAAaK,EACbP,UAAMO,EACNN,aAASM,EACTJ,iBAAaI,EACbH,MACIJ,GAAQC,EACF,2CACA,kCAhCT,yBAAAkB,EAAAe,SAAAzB,EAAAhB,uIAsCT,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,CAAM1C,SAAUD,KAAKe,aACrBvB,EAAAC,EAAAC,cAACkD,EAAY5C,KAAKa,eApDhBhB,cCMEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.34a9f3f9.chunk.js","sourcesContent":["import React from 'react';\nimport './title.css';\n\nclass Title extends React.Component {\n    render() {\n        return (\n            <div className=\"Title\">\n                <h1>Weather Finder</h1>\n            </div>\n        );\n    }\n}\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.css';\n\nclass Form extends React.Component {\n    static propTypes = {\n        onSubmit: PropTypes.func.isRequired,\n    };\n\n    render() {\n        const { props } = this;\n        return (\n            <form className=\"form\" onSubmit={props.onSubmit}>\n                <input type=\"text\" id=\"city\" name=\"city\" placeholder=\"Enter City\" />\n\n                <input type=\"text\" id=\"country\" name=\"country\" placeholder=\"Enter Country\" />\n\n                <button>Get Weather</button>\n            </form>\n        );\n    }\n}\n\nexport default Form;\n","import React from 'react';\nimport './weather.css'\nclass Weather extends React.Component {\n\n    render  () {\n        return (\n            <div className = 'weather-display'>\n                {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>} {\"\\n\"}\n                {this.props.temperature && <p>Temperature: {this.props.temperature}</p>} {\"\\n\"}\n                {this.props.description && <p>Conditions: {this.props.description}</p>} {\"\\n\"}\n                {this.props.error && <p>{this.props.error}</p>}\n            </div>\n        )\n    }\n}\n\nexport default Weather","import React, { Component } from 'react';\nimport Title from './components/title';\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        description: undefined,\n        error: undefined,\n    };\n\n    //call the api data\n    getWeather = async (e) => {\n        // prevent page from reloading when button is pressed\n        e.preventDefault();\n\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        const response = await fetch(\n            `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${\n                process.env.REACT_APP_WEATHER_API_KEY\n            }&units=imperial`\n        );\n\n        const { cod, main, name, sys, weather } = await response.json();\n\n        if (city && country && cod === 200) {\n            this.setState({\n                temperature: main.temp,\n                city: name,\n                country: sys.country,\n                description: weather[0].description,\n                error: '',\n            });\n        } else {\n            this.setState({\n                temperature: undefined,\n                city: undefined,\n                country: undefined,\n                description: undefined,\n                error:\n                    city || country\n                        ? 'Location not found. Check your spelling!'\n                        : 'Please Enter a City & Country',\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Title />\n                <Form onSubmit={this.getWeather} />\n                <Weather {...this.state} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}